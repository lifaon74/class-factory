import {
  callTraitMethodOnObject,
  implementTraits,
  mixTraits,
  mixTraitsInterface,
  traitIsImplementedBy,
} from './public';
import { TraitNegate } from './built-in/arithmetic/trait-negate';
import { TraitToString } from './built-in/others/trait-to-string';
import { TraitSubtract } from './built-in/arithmetic/trait-subtract';
import { TraitAdd } from './built-in/arithmetic/trait-add';
import { ALLOC, TraitAlloc, TraitAllocFromThis, TraitAllocFromThisPrototype } from './built-in/others/trait-alloc';
import { compareNumber, Ordering, TraitCompare } from './built-in/comparision/trait-compare';
import { sort } from './built-in/functions/sort';
import { TraitArrayLike } from './built-in/array/trait-array-like';
import { CreateAbstractMethodCallError } from '../class-helpers/abstract/create-abstract-method-error';
import { TraitArrayJoin } from './built-in/array/trait-array-join';
import { TraitArrayEvery } from './built-in/array/trait-array-every';
import { DefineProperty } from '../object-helpers/object-define-property';
import { TraitArrayFilter } from './built-in/array/trait-array-filter';
import { Constructor } from '../../core/types/class-types';
import { RegisterChildFunction } from '../function-helpers/register-child-function';


interface Vector2Struct {
  x: number;
  y: number;
}


/*-----*/






/*-----*/

// export async function debugOperatorOverloading1() {
//
//   const operators: string[] = ['+', '-', '*', '/'];
//   const maxVars: number = 3;
//   const variables: number[] = Array.from({ length: maxVars }, () => Math.random());
//
//
//   function fillMap(
//     map: Map<number, string[]>,
//     operations: string[],
//     variables: number[],
//     value: number, // result of all 'operations' on 'variables'
//   ) {
//     map.set(value, operations);
//
//     const operationsLengthPlusOne: number = operations.length + 1;
//
//     if (operationsLengthPlusOne < variables.length) {
//       fillMap(map, operations.concat(['+']), variables, value + variables[operationsLengthPlusOne]);
//       fillMap(map, operations.concat(['-']), variables, value - variables[operationsLengthPlusOne]);
//       fillMap(map, operations.concat(['*']), variables, value * variables[operationsLengthPlusOne]);
//       fillMap(map, operations.concat(['/']), variables, value / variables[operationsLengthPlusOne]);
//     }
//   }
//
//   function buildMap(variables: number[]): Map<number, string[]> {
//     const map: Map<number, string[]> = new Map<number, string[]>();
//
//     fillMap(map, [], variables, variables[0]);
//
//     return map;
//   }
//
//   console.log(buildMap(variables));
// }



// export async function debugTraitTest() {
//   const map = ExtractMethodsFromObjectPrototypeChain({
//     methodA() {
//       console.log('hello');
//     }
//   });
//   console.log(map);
// }

export async function debugTrait1() {
  const vecA = {
    x: 1,
    y: 2,
  };

  const vecB = {
    x: 3,
    y: 4,
  };

  abstract class TraitVector2ToString extends TraitToString {
    toString(this: Vector2Struct): string {
      return `vec2(${ this.x }, ${ this.y })`;
    }
  }

  // abstract class TraitVector2New extends TraitNew<[x: number, y: number], any> {
  //   [NEW](x: number, y: number): this {
  //     return { x, y } as any;
  //   }
  // }
  //
  // abstract class TraitVector2NewWithTraits extends TraitVector2New {
  //   [NEW](this: Vector2, x: number, y: number): this {
  //     return __alloc__({ x, y }, this) as any;
  //     // return new Vector2(x, y) as any;
  //   }
  // }

  abstract class TraitVector2Alloc extends TraitAlloc<Vector2Struct, Vector2Struct> {
  }

  abstract class TraitVector2AllocFromThis extends TraitAllocFromThis<Vector2Struct, Vector2Struct> {
  }

  abstract class TraitVector2AllocFromThisPrototype extends TraitAllocFromThisPrototype<Vector2Struct, Vector2Struct> {
  }

  abstract class TraitVector2Length {
    length(this: Vector2Struct): number {
      return Math.sqrt((this.x * this.x) + (this.y * this.y));
    }
  }

  abstract class TraitVector2Normalize extends TraitVector2Alloc {
    normalize(this: Vector2Struct): this {
      const length = callTraitMethodOnObject(TraitVector2Length, 'length', this, []);
      return this[ALLOC]({
        x: this.x / length,
        y: this.y / length,
      }) as any;
    }
  }

  abstract class TraitVector2Add extends mixTraits([TraitAdd, TraitVector2Alloc]) {
    add(this: Vector2Struct & TraitVector2Alloc, value: Vector2Struct): this {
      return this[ALLOC]({
        x: this.x + value.x,
        y: this.y + value.y,
      }) as any;
    }
  }

  abstract class TraitVector2AddSelf {
    addSelf(this: Vector2Struct, value: Vector2Struct): this {
      this.x += value.x;
      this.y += value.y;
      return this as any;
    }
  }

  abstract class TraitVector2Sub extends mixTraits([TraitSubtract, TraitVector2Alloc]) {
    subtract(this: Vector2Struct & TraitVector2Alloc, value: Vector2Struct): this {
      return this[ALLOC]({
        x: this.x - value.x,
        y: this.y - value.y,
      }) as any;
    }
  }

  abstract class TraitVector2Negate extends mixTraits([TraitNegate, TraitVector2Alloc]) {
    negate(this: Vector2Struct): this {
      return this[ALLOC]({
        x: -this.x,
        y: -this.y,
      }) as any;
    }
  }



  interface IVector2Trait extends TraitVector2Length,
    TraitVector2Normalize,
    TraitVector2Add,
    TraitVector2Negate,
    TraitVector2Sub,
    TraitVector2ToString,
    TraitVector2AddSelf,
    TraitVector2AllocFromThisPrototype {
  }

  const Vector2Trait = mixTraitsInterface<IVector2Trait, void>([
    TraitVector2Length,
    TraitVector2Normalize,
    TraitVector2Add,
    TraitVector2Negate,
    TraitVector2Sub,
    TraitVector2ToString,
    TraitVector2AddSelf,
    TraitVector2AllocFromThisPrototype,
  ]);
  // const Vector2Traits = mixTraits<Traits, void>([
  //     TraitVector2Add,
  //     TraitVector2Negate,
  //     TraitVector2Sub,
  //     TraitVector2ToString,
  //     TraitVector2NewWithTraits,
  // ])

  class Vector2 extends Vector2Trait implements Vector2Struct {
    x: number;
    y: number;

    constructor(x: number, y: number) {
      super();
      this.x = x;
      this.y = y;
    }
  }

  const a = new Vector2(1, 2);
  console.log(a.negate().toString());
  console.log(a.addSelf(new Vector2(4, 5)).toString());
  console.log(a.normalize());

  console.log(traitIsImplementedBy(TraitVector2AllocFromThisPrototype, a));
  console.log(traitIsImplementedBy(Vector2, a));

  (window as any).Vector2 = Vector2;
  const vecA$ = implementTraits([TraitVector2ToString, TraitVector2Negate, TraitVector2AllocFromThis] as (typeof TraitVector2ToString | typeof TraitVector2Negate | typeof TraitVector2AllocFromThis)[], vecA);
  console.log(vecA$.negate().toString());

  // console.log(traitIsImplementedBy(TraitVector2ToString, vecA));
  // console.log(traitIsImplementedBy(TraitVector2New, vecA));
  // console.log(traitIsImplementedBy(TraitVector2NewWithTraits, vecA));
  //
  // console.log(vecA$.toString());
}

export async function debugTrait2() {

  interface IVNumber {
    value: number;
  }


  abstract class TraitVNumberCompare extends TraitCompare<IVNumber> {
    compare(this: IVNumber, value: IVNumber): Ordering {
      return compareNumber(this.value, value.value);
    }
  }

  class VNumber extends mixTraits([TraitVNumberCompare]) implements IVNumber {
    value: number;

    constructor(value: number) {
      super();
      this.value = value;
    }
  }

  const array = Array.from({ length: 10 }, () => new VNumber(Math.random()));
  console.log(sort(array));
}

export async function debugTrait3() {

  interface IStruct {
    value: number;
  }

  // TODO: add support for getter and setters ?

  abstract class TraitLength {
    get length(): number {
      return 5;
    }
  }

  class Struct extends mixTraits([TraitLength]) implements IStruct {
    value: number;

    constructor(value: number) {
      super();
      this.value = value;
    }
  }

  const a = new Struct(5);

  console.log(a.length);
}

export async function debugTrait4() {
  console.log(traitIsImplementedBy(TraitToString, 1));
  console.log(traitIsImplementedBy(TraitToString, {}));
  console.log(traitIsImplementedBy(TraitToString, Object.create(null)));
}


export async function debugTrait5() {

  const ITEMS: unique symbol = Symbol('items');

  interface ReadonlyArrayStruct<GValue> {
    readonly [ITEMS]: GValue[];
  }


  abstract class TraitReadonlyArrayAllocFromThisPrototype<GValue> extends TraitAllocFromThisPrototype<ReadonlyArrayStruct<GValue>, ReadonlyArrayStruct<GValue>> {
  }

  abstract class TraitReadonlyArrayArrayLike<GValue> extends TraitArrayLike<GValue> {
    length(this: ReadonlyArrayStruct<GValue>): number {
      return this[ITEMS].length;
    }

    item(this: ReadonlyArrayStruct<GValue>, index: number): GValue {
      return this[ITEMS][index];
    }

    [Symbol.iterator](this: ReadonlyArrayStruct<GValue>): IterableIterator<GValue> {
      return this[ITEMS][Symbol.iterator]();
    }
  }

  abstract class TraitReadonlyArrayEvery<GValue> extends TraitArrayEvery<GValue> {
    every(this: ReadonlyArrayStruct<GValue>, predicate: (value: GValue, index: number, array: this) => boolean): boolean {
      return this[ITEMS].every(predicate as any, this);
    }
  }

  abstract class TraitReadonlyArraySome<GValue> extends TraitArrayEvery<GValue> {
    some(this: ReadonlyArrayStruct<GValue>, predicate: (value: GValue, index: number, array: this) => boolean): boolean {
      return this[ITEMS].some(predicate as any, this);
    }
  }

  abstract class TraitReadonlyArrayFilter<GValue> extends TraitArrayFilter<GValue> {
    filter(this: ReadonlyArrayStruct<GValue>, predicate: (value: GValue, index: number, array: this) => boolean): this {
      return this[ITEMS].filter(predicate as any, this) as any;
    }
  }


  interface IReadonlyArrayTrait<GValue> extends TraitReadonlyArrayArrayLike<GValue>,
    TraitArrayJoin<GValue>,
    TraitReadonlyArrayEvery<GValue>,
    TraitReadonlyArraySome<GValue>,
    TraitReadonlyArrayFilter<GValue>,
    TraitReadonlyArrayAllocFromThisPrototype<GValue> {
  }

  const ReadonlyArrayTrait = mixTraitsInterface<IReadonlyArrayTrait<any>, void>([
    TraitReadonlyArrayArrayLike,
    TraitArrayJoin,
    TraitReadonlyArrayEvery,
    TraitReadonlyArraySome,
    TraitReadonlyArrayFilter,
    TraitReadonlyArrayAllocFromThisPrototype,
  ]);

  // const ReadonlyArrayTrait = mixTraits([
  //   TraitReadonlyArrayAllocFromThisPrototype,
  //   TraitReadonlyArrayArrayLike,
  // ])

  class ReadonlyArray<GValue> extends ReadonlyArrayTrait implements ReadonlyArrayStruct<GValue> {
    readonly [ITEMS]: GValue[];

    constructor(items: GValue[] = []) {
      super();
      DefineProperty(this, ITEMS, {
        configurable: false,
        enumerable: false,
        writable: false,
        value: items,
      })
    }
  }

  const a = new ReadonlyArray<number>([0, 1, 2, 3, 4]);

  (window as any).a = a;
  console.log(a);
  // console.log(a.length());
}


export async function debugTraitIterable() {
  // const iterator = [0, 1, 2, 3, 4][Symbol.iterator]();
  // console.log(iterator);
}


export async function debugTrait() {
  // await debugTraitTest();
  // await debugTrait1();
  // await debugTrait2();
  // await debugTrait3();
  await debugTrait4();
  // await debugTrait5();
  // await debugTraitIterable();
}
